--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 12/16/2023 12:36:01 PM
-- Server version: 8.0.33
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE meditrack;

--
-- Drop procedure `Proc_prescriptions_getPaging`
--
DROP PROCEDURE IF EXISTS Proc_prescriptions_getPaging;

--
-- Drop procedure `Proc_records_getPaging`
--
DROP PROCEDURE IF EXISTS Proc_records_getPaging;

--
-- Drop procedure `Proc_appointments_Insert`
--
DROP PROCEDURE IF EXISTS Proc_appointments_Insert;

--
-- Drop procedure `Proc_appointments_Update`
--
DROP PROCEDURE IF EXISTS Proc_appointments_Update;

--
-- Drop table `appointments`
--
DROP TABLE IF EXISTS appointments;

--
-- Drop procedure `Proc_family_members_Insert`
--
DROP PROCEDURE IF EXISTS Proc_family_members_Insert;

--
-- Drop procedure `Proc_family_members_Update`
--
DROP PROCEDURE IF EXISTS Proc_family_members_Update;

--
-- Drop table `family_members`
--
DROP TABLE IF EXISTS family_members;

--
-- Drop procedure `Proc_notifications_Insert`
--
DROP PROCEDURE IF EXISTS Proc_notifications_Insert;

--
-- Drop procedure `Proc_notifications_Update`
--
DROP PROCEDURE IF EXISTS Proc_notifications_Update;

--
-- Drop table `notifications`
--
DROP TABLE IF EXISTS notifications;

--
-- Drop procedure `Proc_medications_Insert`
--
DROP PROCEDURE IF EXISTS Proc_medications_Insert;

--
-- Drop procedure `Proc_medications_Update`
--
DROP PROCEDURE IF EXISTS Proc_medications_Update;

--
-- Drop table `medications`
--
DROP TABLE IF EXISTS medications;

--
-- Drop procedure `Proc_prescriptions_Insert`
--
DROP PROCEDURE IF EXISTS Proc_prescriptions_Insert;

--
-- Drop procedure `Proc_prescriptions_Update`
--
DROP PROCEDURE IF EXISTS Proc_prescriptions_Update;

--
-- Drop table `prescriptions`
--
DROP TABLE IF EXISTS prescriptions;

--
-- Drop procedure `Proc_medicaltests_Insert`
--
DROP PROCEDURE IF EXISTS Proc_medicaltests_Insert;

--
-- Drop procedure `Proc_medicaltests_Update`
--
DROP PROCEDURE IF EXISTS Proc_medicaltests_Update;

--
-- Drop table `medicaltests`
--
DROP TABLE IF EXISTS medicaltests;

--
-- Drop procedure `Proc_treatments_Insert`
--
DROP PROCEDURE IF EXISTS Proc_treatments_Insert;

--
-- Drop procedure `Proc_treatments_Update`
--
DROP PROCEDURE IF EXISTS Proc_treatments_Update;

--
-- Drop table `treatments`
--
DROP TABLE IF EXISTS treatments;

--
-- Drop procedure `Proc_records_Insert`
--
DROP PROCEDURE IF EXISTS Proc_records_Insert;

--
-- Drop procedure `Proc_records_Update`
--
DROP PROCEDURE IF EXISTS Proc_records_Update;

--
-- Drop table `records`
--
DROP TABLE IF EXISTS records;

--
-- Drop procedure `Proc_user_details_Insert`
--
DROP PROCEDURE IF EXISTS Proc_user_details_Insert;

--
-- Drop procedure `Proc_user_details_Update`
--
DROP PROCEDURE IF EXISTS Proc_user_details_Update;

--
-- Drop table `user_details`
--
DROP TABLE IF EXISTS user_details;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Set default database
--
USE meditrack;

--
-- Create table `users`
--
CREATE TABLE users (
  UserID char(36) NOT NULL DEFAULT '',
  PhoneNumber varchar(50) DEFAULT NULL,
  UserName varchar(20) DEFAULT NULL,
  Password varchar(20) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (UserID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng người dùng';

--
-- Create table `user_details`
--
CREATE TABLE user_details (
  UserDetailID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  FullName varchar(50) DEFAULT NULL,
  DateOfBirth datetime DEFAULT NULL,
  Gender int DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (UserDetailID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng chi tiết người dùng';

--
-- Create foreign key
--
ALTER TABLE user_details
ADD CONSTRAINT FK_userdetail_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_user_details_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_user_details_Update (IN p_UserDetailID char(36),
IN p_UserID char(36),
IN p_FullName varchar(50),
IN p_DateOfBirth datetime,
IN p_Gender int,
IN p_Address varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  UPDATE user_details
  SET UserID = p_UserID,
      FullName = p_FullName,
      DateOfBirth = p_DateOfBirth,
      Gender = p_Gender,
      Address = p_Address,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE UserDetailID = p_UserDetailID;


END
$$

--
-- Create procedure `Proc_user_details_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_user_details_Insert (IN p_UserDetailID char(36),
IN p_UserID char(36),
IN p_FullName varchar(50),
IN p_DateOfBirth datetime,
IN p_Gender int,
IN p_Address varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO user_details (UserDetailID, UserID, FullName, DateOfBirth, Gender, Address, CreatedDate,
  CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_UserDetailID, p_UserID, p_FullName, p_DateOfBirth, p_Gender, p_Address, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);


END
$$

DELIMITER ;

--
-- Create table `records`
--
CREATE TABLE records (
  RecordID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  RecordDate datetime DEFAULT NULL,
  RecordTitle varchar(100) DEFAULT NULL,
  MedicalExaminationAddress varchar(255) DEFAULT NULL,
  DoctorName varchar(50) DEFAULT NULL,
  FullName varchar(50) DEFAULT NULL,
  DateOfBirth datetime DEFAULT NULL,
  Gender int DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  PatientName varchar(50) DEFAULT NULL,
  PatientID char(36) DEFAULT NULL,
  PhoneNumber varchar(20) DEFAULT NULL,
  DoctorPhoneNumber varchar(20) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (RecordID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng hồ sơ';

--
-- Create foreign key
--
ALTER TABLE records
ADD CONSTRAINT FK_Records_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID);

DELIMITER $$

--
-- Create procedure `Proc_records_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_records_Update (IN p_RecordID char(36),
IN p_UserID char(36),
IN p_RecordDate datetime,
IN p_RecordTitle varchar(100),
IN p_MedicalExaminationAddress varchar(255),
IN p_DoctorName varchar(50),
IN p_FullName varchar(50),
IN p_DateOfBirth datetime,
IN p_Gender int,
IN p_Address varchar(255),
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_PhoneNumber varchar(20),
IN p_DoctorPhoneNumber varchar(20),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  UPDATE records
  SET UserID = p_UserID,
      RecordDate = p_RecordDate,
      RecordTitle = p_RecordTitle,
      MedicalExaminationAddress = p_MedicalExaminationAddress,
      DoctorName = p_DoctorName,
      FullName = p_FullName,
      DateOfBirth = p_DateOfBirth,
      Gender = p_Gender,
      Address = p_Address,
      PatientName = p_PatientName,
      PatientID = p_PatientID,
      PhoneNumber = p_PhoneNumber,
      DoctorPhoneNumber = p_DoctorPhoneNumber,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE RecordID = p_RecordID;


END
$$

--
-- Create procedure `Proc_records_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_records_Insert (IN p_RecordID char(36),
IN p_UserID char(36),
IN p_RecordDate datetime,
IN p_RecordTitle varchar(100),
IN p_MedicalExaminationAddress varchar(255),
IN p_DoctorName varchar(50),
IN p_FullName varchar(50),
IN p_DateOfBirth datetime,
IN p_Gender int,
IN p_Address varchar(255),
IN p_PhoneNumber varchar(20),
IN p_DoctorPhoneNumber varchar(20),
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  INSERT INTO records (RecordID, UserID, RecordDate, RecordTitle, MedicalExaminationAddress, DoctorName,
  FullName, DateOfBirth, Gender, Address, PhoneNumber, DoctorPhoneNumber, CreatedDate,
  CreatedBy, ModifiedDate, ModifiedBy, PatientName, PatientID)
    VALUES (p_RecordID, p_UserID, p_RecordDate, p_RecordTitle, p_MedicalExaminationAddress, p_DoctorName, p_FullName, p_DateOfBirth, p_Gender, p_Address, p_PhoneNumber, p_DoctorPhoneNumber, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy, p_PatientName, p_PatientID);

END
$$

DELIMITER ;

--
-- Create table `treatments`
--
CREATE TABLE treatments (
  TreatmentID char(36) NOT NULL DEFAULT '',
  RecordID char(36) DEFAULT NULL,
  Diagnosis varchar(255) DEFAULT NULL,
  TreatmentDate datetime DEFAULT NULL,
  TreatmentDescription varchar(255) DEFAULT NULL,
  MedicalHistory varchar(500) DEFAULT NULL,
  PrescriptionName varchar(50) DEFAULT NULL,
  Notes varchar(500) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (TreatmentID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'Bảng điều trị';

--
-- Create foreign key
--
ALTER TABLE treatments
ADD CONSTRAINT FK_Treatments_RecordID FOREIGN KEY (RecordID)
REFERENCES records (RecordID);

DELIMITER $$

--
-- Create procedure `Proc_treatments_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_treatments_Update (IN p_TreatmentID char(36),
IN p_RecordID char(36),
IN p_Diagnosis varchar(255),
IN p_TreatmentDate datetime,
IN p_TreatmentDescription varchar(255),
IN p_MedicalHistory varchar(500),
IN p_PrescriptionName varchar(50),
IN p_Notes varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  UPDATE treatments
  SET RecordID = p_RecordID,
      Diagnosis = p_Diagnosis,
      TreatmentDate = p_TreatmentDate,
      TreatmentDescription = p_TreatmentDescription,
      MedicalHistory = p_MedicalHistory,
      PrescriptionName = p_PrescriptionName,
      Notes = p_Notes,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE TreatmentID = p_TreatmentID;

END
$$

--
-- Create procedure `Proc_treatments_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_treatments_Insert (IN p_TreatmentID char(36),
IN p_RecordID char(36),
IN p_Diagnosis varchar(255),
IN p_TreatmentDate datetime,
IN p_TreatmentDescription varchar(255),
IN p_MedicalHistory varchar(500),
IN p_PrescriptionName varchar(50),
IN p_Notes varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  INSERT INTO treatments (TreatmentID, RecordID, Diagnosis, TreatmentDate, TreatmentDescription, MedicalHistory,
  PrescriptionName, Notes, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_TreatmentID, p_RecordID, p_Diagnosis, p_TreatmentDate, p_TreatmentDescription, p_MedicalHistory, p_PrescriptionName, p_Notes, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);


END
$$

DELIMITER ;

--
-- Create table `medicaltests`
--
CREATE TABLE medicaltests (
  TestID char(36) NOT NULL DEFAULT '',
  RecordID char(36) DEFAULT NULL,
  TestName varchar(100) DEFAULT NULL,
  Unit varchar(50) DEFAULT NULL,
  Normal varchar(50) DEFAULT NULL,
  TestDate datetime DEFAULT NULL,
  SamplingTime datetime DEFAULT NULL,
  SampleReceiptTime datetime DEFAULT NULL,
  TypeTest varchar(20) DEFAULT NULL,
  TestBy varchar(50) DEFAULT NULL,
  TestResult varchar(255) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (TestID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'Bảng xét nghiệm';

--
-- Create foreign key
--
ALTER TABLE medicaltests
ADD CONSTRAINT FK_MedicalTests_RecordID FOREIGN KEY (RecordID)
REFERENCES records (RecordID);

DELIMITER $$

--
-- Create procedure `Proc_medicaltests_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_medicaltests_Update (IN p_TestID char(36),
IN p_RecordID char(36),
IN p_TestName varchar(100),
IN p_Unit varchar(50),
IN p_Normal varchar(50),
IN p_TestDate datetime,
IN p_SamplingTime datetime,
IN p_SampleReceiptTime datetime,
IN p_TypeTest varchar(20),
IN p_TestBy varchar(50),
IN p_TestResult varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  UPDATE medicaltests
  SET RecordID = p_RecordID,
      TestName = p_TestName,
      Unit = p_Unit,
      Normal = p_Normal,
      TestDate = p_TestDate,
      SamplingTime = p_SamplingTime,
      SampleReceiptTime = p_SampleReceiptTime,
      TypeTest = p_TypeTest,
      TestBy = p_TestBy,
      TestResult = p_TestResult,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE TestID = p_TestID;


END
$$

--
-- Create procedure `Proc_medicaltests_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_medicaltests_Insert (IN p_TestID char(36),
IN p_RecordID char(36),
IN p_TestName varchar(100),
IN p_Unit varchar(50),
IN p_Normal varchar(50),
IN p_TestDate datetime,
IN p_SamplingTime datetime,
IN p_SampleReceiptTime datetime,
IN p_TypeTest varchar(20),
IN p_TestBy varchar(50),
IN p_TestResult varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO medicaltests (TestID, RecordID, TestName, Unit, Normal, TestDate, SamplingTime, SampleReceiptTime,
  TypeTest, TestBy, TestResult, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_TestID, p_RecordID, p_TestName, p_Unit, p_Normal, p_TestDate, p_SamplingTime, p_SampleReceiptTime, p_TypeTest, p_TestBy, p_TestResult, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);

END
$$

DELIMITER ;

--
-- Create table `prescriptions`
--
CREATE TABLE prescriptions (
  PrescriptionID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  PrescriptionName varchar(200) DEFAULT NULL,
  Notes varchar(500) DEFAULT NULL,
  PrescriptionStatus int DEFAULT NULL,
  PrescriptionDate datetime DEFAULT NULL,
  PatientName varchar(50) DEFAULT NULL,
  PatientID char(36) DEFAULT NULL,
  CreatedByDoctor varchar(50) DEFAULT NULL,
  Diagnose varchar(500) DEFAULT NULL,
  CreatedByAddress varchar(255) DEFAULT NULL,
  FromDate datetime DEFAULT NULL,
  ToDate datetime DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(255) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (PrescriptionID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng đơn thuốc';

--
-- Create foreign key
--
ALTER TABLE prescriptions
ADD CONSTRAINT FK_Prescription_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID);

DELIMITER $$

--
-- Create procedure `Proc_prescriptions_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_prescriptions_Update (IN p_PrescriptionID char(36),
IN p_UserID char(36),
IN p_PrescriptionName varchar(200),
IN p_Notes varchar(500),
IN p_PrescriptionStatus int,
IN p_PrescriptionDate datetime,
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_CreatedByDoctor varchar(50),
IN p_Diagnose varchar(500),
IN p_CreatedByAddress varchar(255),
IN p_FromDate datetime,
IN p_ToDate datetime,
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(255),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  UPDATE prescriptions
  SET UserID = p_UserID,
      PrescriptionName = p_PrescriptionName,
      Notes = p_Notes,
      PrescriptionStatus = p_PrescriptionStatus,
      PrescriptionDate = p_PrescriptionDate,
      PatientName = p_PatientName,
      PatientID = p_PatientID,
      CreatedByDoctor = p_CreatedByDoctor,
      Diagnose = p_Diagnose,
      CreatedByAddress = p_CreatedByAddress,
      FromDate = p_FromDate,
      ToDate = p_ToDate,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE PrescriptionID = p_PrescriptionID;


END
$$

--
-- Create procedure `Proc_prescriptions_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_prescriptions_Insert (IN p_PrescriptionID char(36),
IN p_UserID char(36),
IN p_PrescriptionName varchar(200),
IN p_Notes varchar(500),
IN p_PrescriptionStatus int,
IN p_PrescriptionDate datetime,
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_CreatedByDoctor varchar(50),
IN p_Diagnose varchar(500),
IN p_CreatedByAddress varchar(255),
IN p_FromDate datetime,
IN p_ToDate datetime,
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(255),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  INSERT INTO prescriptions (PrescriptionID, UserID, PrescriptionName, Notes, PrescriptionStatus,
  PrescriptionDate, PatientName, PatientID, CreatedByDoctor, Diagnose,
  CreatedByAddress, FromDate, ToDate, CreatedDate, CreatedBy, ModifiedDate,
  ModifiedBy)
    VALUES (p_PrescriptionID, p_UserID, p_PrescriptionName, p_Notes, p_PrescriptionStatus, p_PrescriptionDate, p_PatientName, p_PatientID, p_CreatedByDoctor, p_Diagnose, p_CreatedByAddress, p_FromDate, p_ToDate, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);

END
$$

DELIMITER ;

--
-- Create table `medications`
--
CREATE TABLE medications (
  MedicationID char(36) NOT NULL DEFAULT '',
  PrescriptionID char(36) DEFAULT NULL,
  MedicationName varchar(255) DEFAULT NULL,
  QuantityForMorning int DEFAULT NULL,
  QuantityForAfternoon int DEFAULT NULL,
  Unit varchar(50) DEFAULT NULL,
  Notes varchar(500) DEFAULT NULL,
  RouteOfAdministration varchar(255) DEFAULT NULL,
  Warnings varchar(500) DEFAULT NULL,
  ExpiryDate datetime DEFAULT NULL,
  SideEffects varchar(500) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (MedicationID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng thuốc';

--
-- Create foreign key
--
ALTER TABLE medications
ADD CONSTRAINT FK_Medication_PrescriptionID FOREIGN KEY (PrescriptionID)
REFERENCES prescriptions (PrescriptionID);

DELIMITER $$

--
-- Create procedure `Proc_medications_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_medications_Update (IN p_MedicationID char(36),
IN p_PrescriptionID char(36),
IN p_MedicationName varchar(255),
IN p_QuantityForMorning int,
IN p_QuantityForAfternoon int,
IN p_Unit varchar(50),
IN p_Notes varchar(500),
IN p_RouteOfAdministration varchar(255),
IN p_Warnings varchar(500),
IN p_ExpiryDate datetime,
IN p_SideEffects varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  UPDATE medications
  SET PrescriptionID = p_PrescriptionID,
      MedicationName = p_MedicationName,
      QuantityForMorning = p_QuantityForMorning,
      QuantityForAfternoon = p_QuantityForAfternoon,
      Unit = p_Unit,
      Notes = p_Notes,
      RouteOfAdministration = p_RouteOfAdministration,
      Warnings = p_Warnings,
      ExpiryDate = p_ExpiryDate,
      SideEffects = p_SideEffects,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE MedicationID = p_MedicationID;


END
$$

--
-- Create procedure `Proc_medications_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_medications_Insert (IN p_MedicationID char(36),
IN p_PrescriptionID char(36),
IN p_MedicationName varchar(255),
IN p_QuantityForMorning int,
IN p_QuantityForAfternoon int,
IN p_Unit varchar(50),
IN p_Notes varchar(500),
IN p_RouteOfAdministration varchar(255),
IN p_Warnings varchar(500),
IN p_ExpiryDate datetime,
IN p_SideEffects varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO medications (MedicationID, PrescriptionID, MedicationName, QuantityForMorning, QuantityForAfternoon,
  Unit, Notes, RouteOfAdministration, Warnings, ExpiryDate, SideEffects,
  CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_MedicationID, p_PrescriptionID, p_MedicationName, p_QuantityForMorning, p_QuantityForAfternoon, p_Unit, p_Notes, p_RouteOfAdministration, p_Warnings, CURRENT_TIMESTAMP(), p_SideEffects, p_CreatedDate, p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);

END
$$

DELIMITER ;

--
-- Create table `notifications`
--
CREATE TABLE notifications (
  NoticeID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  NoticeName varchar(500) DEFAULT NULL,
  NoticeDate datetime DEFAULT NULL,
  NoticeStatus int DEFAULT NULL,
  NoticeType int DEFAULT NULL,
  NoticeOfUser varchar(50) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (NoticeID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'Thông báo';

--
-- Create foreign key
--
ALTER TABLE notifications
ADD CONSTRAINT FK_Notice_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_notifications_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_notifications_Update (IN p_NoticeID char(36),
IN p_UserID char(36),
IN p_NoticeName varchar(500),
IN p_NoticeDate datetime,
IN p_NoticeStatus int,
IN p_NoticeType int,
IN p_NoticeOfUser varchar(50),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN

  UPDATE notifications
  SET UserID = p_UserID,
      NoticeName = p_NoticeName,
      NoticeDate = p_NoticeDate,
      NoticeStatus = p_NoticeStatus,
      NoticeType = p_NoticeType,
      NoticeOfUser = p_NoticeOfUser,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE NoticeID = p_NoticeID;


END
$$

--
-- Create procedure `Proc_notifications_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_notifications_Insert (IN p_NoticeID char(36),
IN p_UserID char(36),
IN p_NoticeName varchar(500),
IN p_NoticeDate datetime,
IN p_NoticeStatus int,
IN p_NoticeType int,
IN p_NoticeOfUser varchar(50),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO notifications (NoticeID, UserID, NoticeName, NoticeDate, NoticeStatus, NoticeType, NoticeOfUser,
  CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_NoticeID, p_UserID, p_NoticeName, p_NoticeDate, p_NoticeStatus, p_NoticeType, p_NoticeOfUser, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);

END
$$

DELIMITER ;

--
-- Create table `family_members`
--
CREATE TABLE family_members (
  PatientID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  PatientName varchar(50) DEFAULT NULL,
  DateOfBirth datetime DEFAULT NULL,
  Relationship varchar(50) DEFAULT NULL,
  PhoneNumber varchar(20) DEFAULT NULL,
  Contact varchar(255) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (PatientID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'Bảng gia đình';

--
-- Create foreign key
--
ALTER TABLE family_members
ADD CONSTRAINT FK_Family_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID);

DELIMITER $$

--
-- Create procedure `Proc_family_members_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_family_members_Update (IN p_PatientID char(36),
IN p_UserID char(36),
IN p_PatientName varchar(50),
IN p_DateOfBirth datetime,
IN p_Relationship varchar(50),
IN p_PhoneNumber varchar(20),
IN p_Contact varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  UPDATE family_members
  SET UserID = p_UserID,
      PatientName = p_PatientName,
      DateOfBirth = p_DateOfBirth,
      Relationship = p_Relationship,
      PhoneNumber = p_PhoneNumber,
      Contact = p_Contact,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE PatientID = p_PatientID;


END
$$

--
-- Create procedure `Proc_family_members_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_family_members_Insert (IN p_PatientID char(36),
IN p_UserID char(36),
IN p_PatientName varchar(50),
IN p_DateOfBirth datetime,
IN p_Relationship varchar(50),
IN p_PhoneNumber varchar(20),
IN p_Contact varchar(255),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO family_members (PatientID, UserID, PatientName, DateOfBirth, Relationship, PhoneNumber,
  Contact, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_PatientID, p_UserID, p_PatientName, p_DateOfBirth, p_Relationship, p_PhoneNumber, p_Contact, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);


END
$$

DELIMITER ;

--
-- Create table `appointments`
--
CREATE TABLE appointments (
  AppointmentID char(36) NOT NULL DEFAULT '',
  UserID char(36) DEFAULT NULL,
  AppointmentName varchar(255) DEFAULT NULL,
  AppointmentDate datetime DEFAULT NULL,
  AppointmentStatus int DEFAULT NULL,
  PatientName varchar(50) DEFAULT NULL,
  PatientID char(36) DEFAULT NULL,
  DoctorName varchar(50) DEFAULT NULL,
  DoctorPhoneNumber varchar(20) DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  Description varchar(500) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy varchar(50) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy varchar(50) DEFAULT NULL,
  PRIMARY KEY (AppointmentID)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_as_ci,
COMMENT = 'bảng cuộc hẹn';

--
-- Create foreign key
--
ALTER TABLE appointments
ADD CONSTRAINT FK_Appointments_UserID FOREIGN KEY (UserID)
REFERENCES users (UserID) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_appointments_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_appointments_Update (IN p_AppointmentID char(36),
IN p_UserID char(36),
IN p_AppointmentName varchar(255),
IN p_AppointmentDate datetime,
IN p_AppointmentStatus int,
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_DoctorName varchar(50),
IN p_DoctorPhoneNumber varchar(20),
IN p_Address varchar(255),
IN p_Description varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  UPDATE appointments
  SET UserID = p_UserID,
      AppointmentName = p_AppointmentName,
      AppointmentDate = p_AppointmentDate,
      AppointmentStatus = p_AppointmentStatus,
      PatientName = p_PatientName,
      PatientID = p_PatientID,
      DoctorName = p_DoctorName,
      DoctorPhoneNumber = p_DoctorPhoneNumber,
      Address = p_Address,
      Description = p_Description,
      ModifiedDate = CURRENT_TIMESTAMP(),
      ModifiedBy = p_ModifiedBy
  WHERE AppointmentID = p_AppointmentID;


END
$$

--
-- Create procedure `Proc_appointments_Insert`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_appointments_Insert (IN p_AppointmentID char(36),
IN p_UserID char(36),
IN p_AppointmentName varchar(255),
IN p_AppointmentDate datetime,
IN p_AppointmentStatus int,
IN p_PatientName varchar(50),
IN p_PatientID char(36),
IN p_DoctorName varchar(50),
IN p_DoctorPhoneNumber varchar(20),
IN p_Address varchar(255),
IN p_Description varchar(500),
IN p_CreatedDate datetime,
IN p_CreatedBy varchar(50),
IN p_ModifiedDate datetime,
IN p_ModifiedBy varchar(50))
BEGIN


  INSERT INTO appointments (AppointmentID, UserID, AppointmentName, AppointmentDate, AppointmentStatus,
  PatientName, PatientID, DoctorName, DoctorPhoneNumber, Address, Description,
  CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
    VALUES (p_AppointmentID, p_UserID, p_AppointmentName, p_AppointmentDate, p_AppointmentStatus, p_PatientName, p_PatientID, p_DoctorName, p_DoctorPhoneNumber, p_Address, p_Description, CURRENT_TIMESTAMP(), p_CreatedBy, CURRENT_TIMESTAMP(), p_ModifiedBy);


END
$$

--
-- Create procedure `Proc_records_getPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_records_getPaging (IN v_Offset int, IN v_Limit int, IN v_Sort varchar(100), IN v_Where varchar(1000))
BEGIN

  -- =============================================
  -- Author:        htthoa
  -- Created date: 10/3/2023
  -- Description:   Lấy danh sách tài sản và tổng số tài sản có phân trang
  -- Modified by:   

  -- =============================================


  -- kiểm tra xem v_Where = "" thì gán v_Where ="1=1" còn ngược lại thì giữ nguyên giá trị
  IF v_Where = "" THEN
    SET v_Where = "1=1";
  END IF;

  -- select v_Where;

  IF v_Sort = "" THEN
    SET v_Sort = "ModifiedDate DESC";
  END IF;


  IF v_Limit = -1 THEN
    SET @filterQuery = CONCAT("SELECT * FROM records WHERE ", v_Where, ' ORDER BY ', v_Sort);
  ELSE
    SET @filterQuery = CONCAT("SELECT * FROM records WHERE ", v_Where, ' ORDER BY ', v_Sort, ' LIMIT ', v_Offset, ',', v_Limit);
  END IF;


  PREPARE filterQuery FROM @filterQuery;
  EXECUTE filterQuery;
  DEALLOCATE PREPARE filterQuery;



  SET @filterQuery = CONCAT("SELECT count(RecordID) AS TotalCount FROM records WHERE ", v_Where);


  PREPARE filterQuery FROM @filterQuery;
  EXECUTE filterQuery;
  DEALLOCATE PREPARE filterQuery;






END
$$

--
-- Create procedure `Proc_prescriptions_getPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_prescriptions_getPaging (IN v_Offset int, IN v_Limit int, IN v_Sort varchar(100), IN v_Where varchar(1000))
BEGIN

  -- =============================================
  -- Author:        htthoa
  -- Created date: 10/3/2023
  -- Description:   Lấy danh sách tài sản và tổng số tài sản có phân trang
  -- Modified by:   

  -- =============================================


  -- kiểm tra xem v_Where = "" thì gán v_Where ="1=1" còn ngược lại thì giữ nguyên giá trị
  IF v_Where = "" THEN
    SET v_Where = "1=1";
  END IF;

  -- select v_Where;

  IF v_Sort = "" THEN
    SET v_Sort = "ModifiedDate DESC";
  END IF;


  IF v_Limit = -1 THEN
    SET @filterQuery = CONCAT("SELECT * FROM prescriptions WHERE ", v_Where, ' ORDER BY ', v_Sort);
  ELSE
    SET @filterQuery = CONCAT("SELECT * FROM prescriptions WHERE ", v_Where, ' ORDER BY ', v_Sort, ' LIMIT ', v_Offset, ',', v_Limit);
  END IF;


  PREPARE filterQuery FROM @filterQuery;
  EXECUTE filterQuery;
  DEALLOCATE PREPARE filterQuery;



  SET @filterQuery = CONCAT("SELECT count(PrescriptionID) AS TotalCount FROM prescriptions WHERE ", v_Where);


  PREPARE filterQuery FROM @filterQuery;
  EXECUTE filterQuery;
  DEALLOCATE PREPARE filterQuery;






END
$$

DELIMITER ;

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
('443f7b5d-99c2-11ee-bfeb-1866da3df2b8', '05521565', 'hoangthoa', '1111', '2023-12-13 21:16:54', '', '2023-12-13 21:16:54', '');

-- 
-- Dumping data for table prescriptions
--
INSERT INTO prescriptions VALUES
('54bed633-b20c-439b-b3f9-28fadda642f8', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'trị sốt xuất huyết', '', 1, '2023-12-13 15:32:56', NULL, NULL, 'Nguyễn a', 'string', 'Hà Nội', '2023-12-13 15:32:56', '2023-12-13 15:32:56', '2023-12-13 15:32:56', 'string', '2023-12-13 15:32:56', 'string'),
('776f56dc-770d-4954-8c38-c9975c7dbbe0', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'trị sốt xuất huyết', '', 2, '2023-12-13 15:32:56', NULL, NULL, 'Nguyễn a', 'string', 'Hà Nội', '2023-12-13 15:32:56', '2023-12-13 15:32:56', '2023-12-13 15:32:56', 'string', '2023-12-13 15:32:56', 'string'),
('bb1882be-70ca-44bc-b2ff-2f0f912c3f6e', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Trị bệnh sốt xuất huyết', '', 3, '2023-12-13 15:31:39', 'string', '3fa85f64-5717-4562-b3fc-2c963f66afa6', 'Nguyễn Văn B', 'string', 'Hà Nội', '2023-12-13 15:31:39', '2023-12-13 15:31:39', '2023-12-13 15:31:39', 'string', '2023-12-13 15:31:39', 'string'),
('df9c9d10-1d34-45e1-b2f3-04be6e1a41bd', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Đơn 1', '', 1, '2023-12-14 15:07:55', NULL, NULL, 'Nguyễn Bảo Anh', 'string', 'Hà Nội', '2023-12-14 15:07:55', '2023-12-14 15:07:55', '2023-12-14 15:07:55', 'string', '2023-12-14 15:07:55', 'string');

-- 
-- Dumping data for table records
--
INSERT INTO records VALUES
('8cb85321-222a-43f2-8131-4cfcd95346b3', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', '2023-12-14 16:04:11', 'demo', 'hà nội', 'Nguyễn Văn a', 'Nguyến', '2023-12-14 16:04:11', 0, '', NULL, NULL, '0111111', '0545555', '2023-12-14 16:04:11', 'string', '2023-12-14 16:04:11', 'string'),
('8deae752-eaa8-4be3-b16c-08badf58be16', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', '2023-12-14 16:04:11', 'demo', 'hà nội', 'Nguyễn Văn a', 'Nguyến', '2023-12-14 16:04:11', 1, 'Hà Nội', NULL, NULL, '06544156', '077777988', '2023-12-14 16:04:11', 'string', '2023-12-14 16:04:11', 'string'),
('fb89aa0d-0e25-448a-8584-050e6956a789', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', '2023-12-14 16:04:11', 'demo', 'hà nội', 'Nguyễn Văn a', 'Nguyến', '2023-12-14 16:04:11', 0, '', NULL, NULL, '022222', '09796456', '2023-12-14 16:04:11', 'string', '2023-12-14 16:04:11', 'string');

-- 
-- Dumping data for table user_details
--
-- Table meditrack.user_details does not contain any data (it is empty)

-- 
-- Dumping data for table treatments
--
INSERT INTO treatments VALUES
('76dc899f-f7e0-4409-b4f7-b5e1918b4f19', '8deae752-eaa8-4be3-b16c-08badf58be16', 'Bị đau bên cổ về phía trái(viêm)', '2023-12-14 16:04:11', '', '', 'Trị đau cổ', '', '2023-12-14 16:04:11', 'string', '2023-12-14 16:04:11', 'string');

-- 
-- Dumping data for table notifications
--
-- Table meditrack.notifications does not contain any data (it is empty)

-- 
-- Dumping data for table medications
--
INSERT INTO medications VALUES
('2b5c9ad6-3b9e-49e8-ac92-b7386cae03de', 'df9c9d10-1d34-45e1-b2f3-04be6e1a41bd', 'Thuốc Cefdinir (Zebacef 300mg)', 1, 1, 'viên', '', '', '', '2023-12-14 15:07:55', '', NULL, NULL, '2023-12-14 15:07:55', 'string');

-- 
-- Dumping data for table medicaltests
--
INSERT INTO medicaltests VALUES
('2ff7d242-b9de-40cd-b3a9-1f5c2eafc6ce', '8deae752-eaa8-4be3-b16c-08badf58be16', 'Glucozo', 'mol/l', '3.25-5.6', '2023-12-14 16:04:11', '2023-12-14 16:04:11', '2023-12-14 16:04:11', 'Máu', 'NguyễnHữu Vinh', '5.25', '2023-12-14 16:04:11', 'string', '2023-12-14 16:04:11', 'string');

-- 
-- Dumping data for table family_members
--
INSERT INTO family_members VALUES
('48f0034c-9bb9-11ee-bfeb-1866da3df2b8', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Nguyễn Ngọc Anh ', '1977-10-10 00:00:00', 'Mẹ', '02154555', '', '2023-12-16 09:17:39', '', '2023-12-16 09:17:39', '');

-- 
-- Dumping data for table appointments
--
INSERT INTO appointments VALUES
('155f05d6-6091-4037-a158-54a8ba54b044', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Khám định kỳ', '2023-12-13 14:19:25', 1, 'Nguyễn Ngọc Anh ', '48f0034c-9bb9-11ee-bfeb-1866da3df2b8', 'Nguyễn Văn Bình', '0253163164', '', '33', '2023-12-13 00:00:00', 'string', '2023-12-13 00:00:00', 'string'),
('182f05d6-6091-4037-a158-54a8ba54b044', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Khám cổ', '2023-12-13 14:19:25', 3, '', '00000000-0000-0000-0000-000000000000', 'Nguyễn Văn Bảo', '0253163164', '', '77', '2023-12-13 00:00:00', 'string', '2023-12-16 12:33:56', 'string'),
('67e92a57-77a0-41cb-a056-bd16f4d2cd90', '443f7b5d-99c2-11ee-bfeb-1866da3df2b8', 'Cuộc hẹn Gặp bác sĩ của con', '2023-12-12 00:00:00', 1, '', NULL, 'Nguyễn Thị Hải', '545454', 'Bệnh Viện nhi', '222', '2023-12-16 12:07:03', NULL, '2023-12-16 12:31:03', NULL);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;